// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Currency {
  BGN
  EUR
}

enum PriceType {
  FIXED
  HOURLY
}

// enum for booking types
enum BookingType {
  DIRECT    // Immediate booking without provider confirmation
  INQUIRY   // Request that requires provider approval
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  passwordHash  String
  firstName     String
  lastName      String
  phone         String
  userType      UserType
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)

  // Profile settings
  bio           String?
  address       String?
  countryId     Int?
  country       Country? @relation(fields: [countryId], references: [id])
  stateId       Int?
  state         State?     @relation(fields: [stateId], references: [id])
  cityId        Int?
  city          City?      @relation(fields: [cityId], references: [id])
  postalCode    String?
  currency      String?
  language      String?
  gender        String?
  dateOfBirth   DateTime?
  
  // Security settings
  twoFactorEnabled Boolean @default(false)
  lastPasswordChange DateTime?
  
  // Notification settings
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(true)
  promotionalEmails  Boolean @default(true)

  // Update location fields to use relations
  countryName String?
  stateName   String?
  cityName    String?
  
  // Relations
  providerProfile   ProviderProfile?
  bookingsAsCustomer Booking[]
  blogPosts        BlogPost[]
  refreshTokens    RefreshToken[]

  @@index([countryId])
  @@index([stateId])
  @@index([cityId])
}

enum UserType {
  provider
  customer
  admin
}

model ProviderProfile {
  id                Int       @id @default(autoincrement())
  userId           Int       @unique
  user             User      @relation(fields: [userId], references: [id])
  companyName      String?
  description      String?
  address          String?
  city             String?
  postalCode       String?
  rating           Float?
  isVerified       Boolean   @default(false)
  documentsVerified Boolean  @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  services         Service[]
}

model Service {
  id            Int       @id @default(autoincrement())
  providerId    Int
  provider      ProviderProfile @relation(fields: [providerId], references: [id])
  title         String
  description   String
  categoryId    Int
  category      Category  @relation(fields: [categoryId], references: [id])
  price         Float    
  priceType     PriceType
  currency      Currency  @default(BGN)
  isActive      Boolean   @default(true)
  bookingType   BookingType @default(DIRECT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  address       String?
  city          String?
  state         String?
  postalCode    String?
  country       String?
  
  // Relations
  serviceImages ServiceImage[]
  bookings      Booking[]
}

model ServiceImage {
  id          Int      @id @default(autoincrement())
  serviceId   Int
  service     Service  @relation(fields: [serviceId], references: [id])
  imageUrl    String
  isMain      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  parentId    Int?
  parent      Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  createdAt   DateTime  @default(now())

  // Relations
  services    Service[]
}

model BlogPost {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  authorId    Int
  author      User      @relation(fields: [authorId], references: [id])
  status      BlogStatus @default(draft)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Booking {
  id          Int       @id @default(autoincrement())
  serviceId   Int
  service     Service   @relation(fields: [serviceId], references: [id])
  customerId  Int
  customer    User      @relation(fields: [customerId], references: [id])
  bookingDate DateTime
  status      BookingStatus @default(pending)
  totalPrice  Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Completion tracking fields
  completedByCustomer  Boolean @default(false)
  completedByProvider  Boolean @default(false)
  autoCompletedAt      DateTime?
  
  // Dispute handling fields
  hasDispute           Boolean @default(false)
  disputeReason        String?
  disputeStatus        DisputeStatus?
  disputeResolvedAt    DateTime?
  
  // Review eligibility tracking
  reviewEligible       Boolean @default(false)
  reviewEligibleUntil  DateTime?
  
  // Cancellation tracking for anti-abuse
  cancelledBy          Int?
  cancellationReason   String?
  cancellationTime     DateTime?
  
  // Relations
  statusHistory        BookingStatusHistory[]
  review      Review?
  
  @@index([serviceId])
  @@index([customerId])
}

model BookingStatusHistory {
  id            Int           @id @default(autoincrement())
  bookingId     Int
  booking       Booking       @relation(fields: [bookingId], references: [id])
  previousStatus BookingStatus
  newStatus     BookingStatus
  changedBy     Int          // User ID who made the change
  changedAt     DateTime     @default(now())
  reason        String?      // Optional reason for the status change
  
  @@index([bookingId])
}

model Review {
  id          Int       @id @default(autoincrement())
  bookingId   Int       @unique
  booking     Booking   @relation(fields: [bookingId], references: [id])
  rating      Int       // We'll validate the rating range in application code
  comment     String?
  createdAt   DateTime  @default(now())
}

enum BlogStatus {
  draft
  published
  archived
}

enum BookingStatus {
  pending
  confirmed
  in_progress    // New status: Service is currently being performed
  completed
  cancelled
  no_show_customer  // New status: Customer didn't show up
  no_show_provider  // New status: Provider didn't show up
  disputed       // New status: Service has an active dispute
}

// Enum for dispute status
enum DisputeStatus {
  OPEN
  RESOLVED_FOR_CUSTOMER
  RESOLVED_FOR_PROVIDER
  CLOSED_NO_RESOLUTION
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

// Add these models for location data
model Country {
  id        Int      @id @default(autoincrement())
  name      String
  nameBg    String?  // Bulgarian name
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  states    State[]
  users     User[]
}

model State {
  id        Int      @id @default(autoincrement())
  name      String
  nameBg    String?  // Bulgarian name
  countryId Int
  country   Country  @relation(fields: [countryId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  cities    City[]
  users     User[]
  
  @@unique([name, countryId])
  @@index([countryId])
}

model City {
  id         Int      @id @default(autoincrement())
  name       String
  nameBg     String?  // Bulgarian name
  stateId    Int
  state      State    @relation(fields: [stateId], references: [id])
  postalCode String   @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  users      User[]
  
  @@unique([name, stateId])
  @@index([stateId])
}